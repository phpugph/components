<?php

namespace UGComponents\Image;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:01.
 */
class Image_ImageHandler_Test extends TestCase
{
  /**
   * @var ImageHandler
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->object = new ImageHandler(__DIR__.'/../assets/image/foobar.png', 'png');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
		$this->object->__destruct();
  }

  /**
   * @covers UGComponents\Image\ImageHandler::__destruct
   */
  public function test__destruct()
  {
		$this->object->__destruct();

		$this->assertNull($this->object->getResource());
  }

  /**
   * @covers UGComponents\Image\ImageHandler::__construct
	 * @covers UGComponents\Image\ImageHandler::createResource
   */
  public function test__construct()
  {
		$actual = $this->object->__construct(__DIR__.'/../assets/image/foobar.png', 'png');
		$this->assertNull($actual);
		$this->object->__destruct();
		$actual = $this->object->__construct(__DIR__.'/../assets/image/foobar.gif', 'gif');
		$this->assertNull($actual);
		$this->object->__destruct();
		$actual = $this->object->__construct(__DIR__.'/../assets/image/foobar.jpg', 'jpg');
		$this->assertNull($actual);
		$this->object->__destruct();
		$actual = $this->object->__construct(__DIR__.'/../assets/image/foobar.wbmp', 'bmp');
		$this->assertNull($actual);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::__toString
   */
  public function test__toString()
  {
		$actual = base64_encode($this->object->__toString());
		$this->assertTrue(!!strlen($actual));

    $object = new ImageHandler(__DIR__.'/../assets/image/foobar.gif', 'gif');
    $actual = base64_encode($object->__toString());
		$this->assertTrue(!!strlen($actual));

    $object = new ImageHandler(__DIR__.'/../assets/image/foobar.png', 'png', true, 9);
    $actual = base64_encode($object->__toString());
		$this->assertTrue(!!strlen($actual));

    $object = new ImageHandler(__DIR__.'/../assets/image/foobar.wbmp', 'bmp');
    $actual = base64_encode($object->__toString());
		$this->assertTrue(!!strlen($actual));

    $object = new ImageHandler(__DIR__.'/../assets/image/foobar.wbmp', 'wbmp');
    $actual = base64_encode($object->__toString());
		$this->assertTrue(!!strlen($actual));

    $object = new ImageHandler(__DIR__.'/../assets/image/foobar.jpg', 'jpg');
    $actual = base64_encode($object->__toString());
		$this->assertTrue(!!strlen($actual));

    $object = new ImageHandler(__DIR__.'/../assets/image/foobar.jpg', 'jpeg');
    $actual = base64_encode($object->__toString());
		$this->assertTrue(!!strlen($actual));

    $object = new ImageHandler(__DIR__.'/../assets/image/foobar.jpg', 'pjpeg');
    $actual = base64_encode($object->__toString());
		$this->assertTrue(!!strlen($actual));
  }

  /**
   * @covers UGComponents\Image\ImageHandler::blur
   */
  public function testBlur()
  {
		$instance = $this->object->blur();
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::brightness
   */
  public function testBrightness()
  {
		$instance = $this->object->brightness(10);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::colorize
   */
  public function testColorize()
  {
		$instance = $this->object->colorize(255, 0, 0);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::contrast
   */
  public function testContrast()
  {
		$instance = $this->object->contrast(10);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::crop
   */
  public function testCrop()
  {
		$instance = $this->object->crop(10);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->crop();
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->crop(200, 200);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->crop(5, 5);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->crop(300, 200);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->crop(200, 300);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::edgedetect
   */
  public function testEdgedetect()
  {
		$instance = $this->object->edgedetect();
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::emboss
   */
  public function testEmboss()
  {
		$instance = $this->object->emboss();
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::gaussianBlur
   */
  public function testGaussianBlur()
  {
		$instance = $this->object->gaussianBlur();
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::getDimensions
   */
  public function testGetDimensions()
  {
		$actual = $this->object->getDimensions();
		$this->assertTrue(is_array($actual));
  }

  /**
   * @covers UGComponents\Image\ImageHandler::getResource
   */
  public function testGetResource()
  {
		$resource = $this->object->getResource();

		$this->assertTrue(imagesx($resource) > 0);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::greyscale
   */
  public function testGreyscale()
  {
		$instance = $this->object->greyscale();
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::invert
   */
  public function testInvert()
  {
		$instance = $this->object->invert();
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->invert(true);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::meanRemoval
   */
  public function testMeanRemoval()
  {
		$instance = $this->object->meanRemoval();
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::negative
   */
  public function testNegative()
  {
		$instance = $this->object->negative();
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::resize
	 * @covers UGComponents\Image\ImageHandler::getHeightAspectRatio
	 * @covers UGComponents\Image\ImageHandler::getWidthAspectRatio
   */
  public function testResize()
  {
		$instance = $this->object->resize(10, 10);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->resize();
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->resize(200, 200);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->resize(5, 5);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->resize(300, 200);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->resize(200, 300);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::rotate
   */
  public function testRotate()
  {
		$instance = $this->object->rotate(10);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::scale
   */
  public function testScale()
  {
		$instance = $this->object->scale(10, 10);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->scale();
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->scale(200, 200);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->scale(5, 5);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->scale(300, 200);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$instance = $this->object->scale(200, 300);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::setTransparency
   */
  public function testSetTransparency()
  {
		$instance = $this->object->setTransparency();
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::smooth
   */
  public function testSmooth()
  {
		$instance = $this->object->smooth(10);
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
  }

  /**
   * @covers UGComponents\Image\ImageHandler::save
   */
  public function testSave()
  {
    $instance = $this->object->save('/tmp/foobar.png', 'png');
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);

		$gif = new ImageHandler(__DIR__.'/../assets/image/foobar.gif', 'gif');
		$jpg = new ImageHandler(__DIR__.'/../assets/image/foobar.jpg', 'jpg');
		$bmp = new ImageHandler(__DIR__.'/../assets/image/foobar.wbmp', 'bmp');

		$instance = $gif->save('/tmp/foobar.gif', 'gif');
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
		$gif->__destruct();

		$instance = $jpg->save('/tmp/foobar.jpg', 'jpg');
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
		$jpg->__destruct();

		$instance = $bmp->save('/tmp/foobar.wbmp', 'bmp');
		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance);
		$bmp->__destruct();
  }

  /**
   * @covers UGComponents\Image\ImageHandler::i
   */
  public function testI()
  {
    $instance1 = ImageHandler::i(__DIR__.'/../assets/image/foobar.png', 'png');

		$this->assertInstanceOf('UGComponents\Image\ImageHandler', $instance1);

		$instance2 = ImageHandler::i(__DIR__.'/../assets/image/foobar.png', 'png');

		$this->assertTrue($instance1 !== $instance2);
  }
}
