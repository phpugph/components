<?php

namespace UGComponents\Http;

use StdClass;
use PHPUnit\Framework\TestCase;
use UGComponents\Http\HttpDispatcher;
use UGComponents\Http\Request;
use UGComponents\Http\Response;
use UGComponents\Http\Router;
use UGComponents\Http\Middleware;

use UGComponents\Resolver\ResolverHandler;
use UGComponents\Event\EventEmitter;
use UGComponents\Profiler\InspectorHandler;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-28 at 11:36:33.
 */
class Http_HttpHandler_Test extends TestCase
{
  /**
   * @var HttpHandler
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new HttpHandler;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers UGComponents\Http\HttpTrait::process
   */
  public function testProcess()
  {
    $this->assertTrue($this->object->process());
  }

  /**
   * @covers UGComponents\Http\HttpTrait::run
   * @covers UGComponents\Http\HttpTrait::main
   * @covers UGComponents\Http\HttpTrait::hasRedirect
   */
  public function testRun()
  {
    try {
      (new HttpHandler)->run(true);
    } catch(HttpException $e) {
      $this->assertEquals('404 Not Found', $e->getMessage());
    }

    $handler = new HttpHandler;
    $handler->getResponse()->addHeader('Location', '/foo');
    $handler->run(true);

    $this->object->getResponse()->setContent('foobar');
    $actual = $this->object->run(true);
    $this->assertTrue($actual);

    $this->object->route('ALL', '**', function() {
      return false;
    });

    $actual = $this->object->run(true);
    $this->assertTrue($actual);

    $this->object->preprocess(function() {
      throw new \Exception('Foobar Exception');
    });

    $this->object->error(function($request, $response) {
      $response->setContent('Foobar Message');
      return false;
    });

    $actual = $this->object->run(true);
    $this->assertFalse($actual);
  }

  /**
   * @covers UGComponents\Http\Dispatcher\DispatcherTrait::getDispatcher
   */
  public function testGetDispatcher()
  {
    $instance = $this->object->getDispatcher();
    $this->assertInstanceOf('UGComponents\Http\HttpDispatcher', $instance);
  }

  /**
   * @covers UGComponents\Http\Dispatcher\DispatcherTrait::setDispatcher
   */
  public function testSetDispatcher()
  {
    $instance = $this->object->setDispatcher(new HttpDispatcher);
    $this->assertInstanceOf('UGComponents\Http\HttpHandler', $instance);
  }

  /**
   * @covers UGComponents\Http\Router\RouterTrait::all
   */
  public function testAll()
  {
    $instance = $this->object->all('/foo/bar', function() {});
    $this->assertInstanceOf('UGComponents\Http\HttpHandler', $instance);
  }

  /**
   * @covers UGComponents\Http\Router\RouterTrait::delete
   */
  public function testDelete()
  {
    $instance = $this->object->delete('/foo/bar', function() {});
    $this->assertInstanceOf('UGComponents\Http\HttpHandler', $instance);
  }

  /**
   * @covers UGComponents\Http\Router\RouterTrait::get
   */
  public function testGet()
  {
    $instance = $this->object->get('/foo/bar', function() {});
    $this->assertInstanceOf('UGComponents\Http\HttpHandler', $instance);
  }

  /**
   * @covers UGComponents\Http\Router\RouterTrait::getRouter
   */
  public function testGetRouter()
  {
    $instance = $this->object->getRouter();
    $this->assertInstanceOf('UGComponents\Http\Router', $instance);
  }

  /**
   * @covers UGComponents\Http\Router\RouterTrait::post
   */
  public function testPost()
  {
    $instance = $this->object->post('/foo/bar', function() {});
    $this->assertInstanceOf('UGComponents\Http\HttpHandler', $instance);
  }

  /**
   * @covers UGComponents\Http\Router\RouterTrait::put
   */
  public function testPut()
  {
    $instance = $this->object->put('/foo/bar', function() {});
    $this->assertInstanceOf('UGComponents\Http\HttpHandler', $instance);
  }

  /**
   * @covers UGComponents\Http\Router\RouterTrait::route
   */
  public function testRoute()
  {
    $instance = $this->object->route('foobar', '/foo/bar', function() {});
    $this->assertInstanceOf('UGComponents\Http\HttpHandler', $instance);
  }

  /**
   * @covers UGComponents\Http\Router\RouterTrait::setRouter
   */
  public function testSetRouter()
  {
    $instance = $this->object->setRouter(new Router);
    $this->assertInstanceOf('UGComponents\Http\HttpHandler', $instance);
  }
}
