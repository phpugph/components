<?php

namespace UGComponents\IO;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-28 at 11:36:33.
 * Magic replacer \n\s+\*\s\@todo\s+ Implement\s[a-zA-Z0-9]+\(\)\.
 */
class IO_Response_Test extends TestCase
{
  /**
   * @var Response
   */
  protected $object;

  /**
   * @var Response
   */
  protected $rest;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new Response(array(
      'code' => 200,
      'headers' => array(
        'foo' => 'bar',
        'bar' => 'foo'
      ),
      'json' => array(
        'foo' => 'bar',
        'bar' => 'foo'
      ),
      'page' => array(
        'title' => 'foobar',
        'flash' => array(
          'message' => 'bar',
          'type' => 'foo'
        ),
        'meta' => array(
          'foo' => 'bar',
          'bar' => 'foo'
        )
      ),
      'body' => 'foobar'
    ));

    $this->rest = new Response(array(
      'code' => 200,
      'headers' => array(
        'foo' => 'bar',
        'bar' => 'foo'
      ),
      'json' => array(
        'error' => true,
        'message' => 'foobar',
        'validation' => array(
          'foo' => 'bar',
          'bar' => 'foo'
        ),
        'results' => array(
          'foo' => 'bar',
          'bar' => 'foo'
        )
      )
    ));
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers UGComponents\IO\Response::load
   */
  public function testLoad()
  {
    $instance = $this->object->load();
    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
  }

  /**
   * @covers UGComponents\IO\Response::getContent
   */
  public function testGetContent()
  {
    $actual = $this->object->getContent();
    $this->assertEquals('foobar', $actual);
  }

  /**
   * @covers UGComponents\IO\Response::hasContent
   */
  public function testHasContent()
  {
    $this->assertTrue($this->object->hasContent());
  }

  /**
   * @covers UGComponents\IO\Response::setContent
   */
  public function testSetContent()
  {
    $instance = $this->object->setContent('foobar');

    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
  }

  /**
   * @covers UGComponents\IO\Response::addHeader
   */
  public function testAddHeader()
  {
    $instance = $this->object->addHeader('zoo', 'foo');
    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
  }

  /**
   * @covers UGComponents\IO\Response::getHeaders
   */
  public function testGetHeaders()
  {
    $actual = $this->object->getHeaders();
    $this->assertArrayHasKey('foo', $actual);
    $actual = $this->object->getHeaders('foo');
    $this->assertEquals('bar', $actual);
  }

  /**
   * covers UGComponents\IO\Response\PageTrait::addMeta
   */
  public function testAddMeta()
  {
    $instance = $this->object->addMeta('zoo', 'foo');
    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
  }

  /**
   * covers UGComponents\IO\Response\PageTrait::getFlash
   */
  public function testGetFlash()
  {
    $actual = $this->object->getFlash();
    $this->assertArrayHasKey('message', $actual);
    $this->assertEquals('foo', $actual['type']);
  }

  /**
   * covers UGComponents\IO\Response\PageTrait::getMeta
   */
  public function testGetMeta()
  {
    $actual = $this->object->getMeta();
    $this->assertArrayHasKey('foo', $actual);
    $actual = $this->object->getMeta('foo');
    $this->assertEquals('bar', $actual);
  }

  /**
   * covers UGComponents\IO\Response\PageTrait::getPage
   */
  public function testGetPage()
  {
    $actual = $this->object->getPage();
    $this->assertArrayHasKey('title', $actual);
    $actual = $this->object->getPage('flash', 'message');
    $this->assertEquals('bar', $actual);
  }

  /**
   * covers UGComponents\IO\Response\PageTrait::hasPage
   */
  public function testHasPage()
  {
    $this->assertTrue($this->object->hasPage());
  }

  /**
   * covers UGComponents\IO\Response\PageTrait::removePage
   */
  public function testRemovePage()
  {
    $instance = $this->object->removePage('meta');
    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
  }

  /**
   * covers UGComponents\IO\Response\PageTrait::setFlash
   */
  public function testSetFlash()
  {
    $instance = $this->object->setFlash('foo', 'bar');
    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
  }

  /**
   * covers UGComponents\IO\Response\PageTrait::setPage
   */
  public function testSetPage()
  {
    $instance = $this->object->setPage('foo', 'bar');
    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
  }

  /**
   * covers UGComponents\IO\Response\PageTrait::setTitle
   */
  public function testSetTitle()
  {
    $instance = $this->object->setTitle('foo');
    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
  }

  /**
   * @covers UGComponents\IO\Response::addValidation
   */
  public function testAddValidation()
  {
    $instance = $this->rest->invalidate('zoo', 'foo');
    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
    $this->assertFalse($this->rest->isValid());
  }

  /**
   * @covers UGComponents\IO\Response::getResults
   */
  public function testGetResults()
  {
    $actual = $this->rest->getResults();
    $this->assertArrayHasKey('foo', $actual);
    $actual = $this->rest->getResults('foo');
    $this->assertEquals('bar', $actual);
  }

  /**
   * covers UGComponents\IO\Response::getMessage
   */
  public function testGetMessage()
  {
    $actual = $this->rest->getMessage();
    $this->assertEquals('foobar', $actual);
  }

  /**
   * covers UGComponents\IO\Response::getMessageType
   */
  public function testGetMessageType()
  {
    $actual = $this->rest->getMessageType();
    $this->assertEquals('error', $actual);

    $this->rest->setError(false);
    $actual = $this->rest->getMessageType();
    $this->assertEquals('success', $actual);

    $this->rest->setError(null);
    $actual = $this->rest->getMessageType();
    $this->assertEquals('info', $actual);
  }

  /**
   * @covers UGComponents\IO\Response::getValidation
   */
  public function testGetValidation()
  {
    $actual = $this->rest->getValidation();
    $this->assertArrayHasKey('foo', $actual);
    $actual = $this->rest->getValidation('foo');
    $this->assertEquals('bar', $actual);
  }

  /**
   * covers UGComponents\IO\Response::hasJson
   */
  public function testHasJson()
  {
    $this->assertTrue($this->object->hasJson());
  }

  /**
   * covers UGComponents\IO\Response::hasMessage
   */
  public function testHasMessage()
  {
    $this->assertTrue($this->rest->hasMessage());
  }

  /**
   * covers UGComponents\IO\Response::hasResults
   */
  public function testHasResults()
  {
    $this->assertTrue($this->rest->hasResults());
    $this->assertTrue($this->rest->hasResults('foo'));
    $this->assertFalse($this->rest->hasResults('zoo'));
  }

  /**
   * covers UGComponents\IO\Response::hasValidation
   */
  public function testHasValidation()
  {
    $this->assertTrue($this->rest->hasValidation());
    $this->assertTrue($this->rest->hasValidation('foo'));
    $this->assertFalse($this->rest->hasValidation('zoo'));
  }

  /**
   * covers UGComponents\IO\Response::isError
   */
  public function testIsError()
  {
    $this->assertTrue($this->rest->isError());

    $this->rest->setError(false);
    $this->assertFalse($this->rest->isError());

    $this->rest->setError(null);
    $this->assertFalse($this->rest->isError());
  }

  /**
   * covers UGComponents\IO\Response::isSuccess
   */
  public function testIsSuccess()
  {
    $this->assertFalse($this->rest->isSuccess());

    $this->rest->setError(false);
    $this->assertTrue($this->rest->isSuccess());

    $this->rest->setError(null);
    $this->assertFalse($this->rest->isSuccess());
  }

  /**
   * covers UGComponents\IO\Response::removeResults
   */
  public function testRemoveResults()
  {
    $instance = $this->rest->removeResults('foo');
    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
  }

  /**
   * covers UGComponents\IO\Response::removeValidation
   */
  public function testRemoveValidation()
  {
    $instance = $this->rest->removeValidation('foo');
    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
  }


  /**
   * @covers UGComponents\IO\Response::setError
   */
  public function testSetError()
  {
    $instance = $this->rest->setError(false);
    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
  }

  /**
   * @covers UGComponents\IO\Response::setResults
   */
  public function testSetResults()
  {
    $instance = $this->rest->setResults('zoo', 'foo');
    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
  }

  /**
   * @covers UGComponents\IO\Response::getStatus
   */
  public function testGetStatus()
  {
    $code = $this->object->getStatus();
    $this->assertEquals(200, $code);
  }

  /**
   * @covers UGComponents\IO\Response::setStatus
   */
  public function testSetStatus()
  {
    $instance = $this->object->setStatus(404, '404 Not Found');
    $this->assertInstanceOf('UGComponents\IO\Response', $instance);
  }
}
