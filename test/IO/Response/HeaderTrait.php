<?php

namespace UGComponents\IO\Response;

use PHPUnit\Framework\TestCase;
use UGComponents\Data\Registry;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-28 at 11:36:34.
 */
class IO_Response_HeaderTrait_Test extends TestCase
{
  /**
   * @var HeaderTrait
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->object = new HeaderTraitStub(array(
      'headers' => array(
        'foo' => 'bar',
        'bar' => 'foo'
      )
    ));
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }

  /**
   * covers UGComponents\IO\Response\HeaderTrait::addHeader
   */
  public function testAddHeader()
  {
    $instance = $this->object->addHeader('zoo', 'foo');
    $this->assertInstanceOf('UGComponents\IO\Response\HeaderTraitStub', $instance);

    $instance = $this->object->addHeader('zoo');
    $this->assertInstanceOf('UGComponents\IO\Response\HeaderTraitStub', $instance);
  }

  /**
   * covers UGComponents\IO\Response\HeaderTrait::getHeaders
   */
  public function testGetHeaders()
  {
    $actual = $this->object->getHeaders();
    $this->assertArrayHasKey('foo', $actual);
    $actual = $this->object->getHeaders('foo');
    $this->assertEquals('bar', $actual);
  }

  /**
   * covers UGComponents\IO\Response\HeaderTrait::removeHeader
   */
  public function testRemoveHeader()
  {
    $instance = $this->object->removeHeader('foo');
    $this->assertInstanceOf('UGComponents\IO\Response\HeaderTraitStub', $instance);
  }
}

if(!class_exists('UGComponents\IO\Response\HeaderTraitStub')) {
  class HeaderTraitStub extends Registry
  {
    use HeaderTrait;
  }
}
