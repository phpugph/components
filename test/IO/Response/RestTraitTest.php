<?php

namespace UGComponents\IO\Response;

use PHPUnit\Framework\TestCase;
use UGComponents\Data\Registry;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-28 at 11:36:34.
 */
class RestTraitTest extends TestCase
{
  /**
   * @var RestTrait
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new RestTraitStub(array(
      'json' => array(
        'error' => true,
        'message' => 'foobar',
        'validation' => array(
          'foo' => 'bar',
          'bar' => 'foo'
        ),
        'results' => array(
          'foo' => 'bar',
          'bar' => 'foo'
        )
      )
    ));
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::getResults
   */
  public function testGetResults()
  {
    $actual = $this->object->getResults();
    $this->assertArrayHasKey('foo', $actual);
    $actual = $this->object->getResults('foo');
    $this->assertEquals('bar', $actual);
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::getMessage
   */
  public function testGetMessage()
  {
    $actual = $this->object->getMessage();
    $this->assertEquals('foobar', $actual);
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::getMessageType
   */
  public function testGetMessageType()
  {
    $actual = $this->object->getMessageType();
    $this->assertEquals('error', $actual);

    $this->object->setError(false);
    $actual = $this->object->getMessageType();
    $this->assertEquals('success', $actual);

    $this->object->setError(null);
    $actual = $this->object->getMessageType();
    $this->assertEquals('info', $actual);
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::getValidation
   */
  public function testGetValidation()
  {
    $actual = $this->object->getValidation();
    $this->assertArrayHasKey('foo', $actual);
    $actual = $this->object->getValidation('foo');
    $this->assertEquals('bar', $actual);
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::hasJson
   */
  public function testHasJson()
  {
    $this->assertTrue($this->object->hasJson());
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::hasMessage
   */
  public function testHasMessage()
  {
    $this->assertTrue($this->object->hasMessage());
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::hasResults
   */
  public function testHasResults()
  {
    $this->assertTrue($this->object->hasResults());
    $this->assertTrue($this->object->hasResults('foo'));
    $this->assertFalse($this->object->hasResults('zoo'));
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::hasValidation
   */
  public function testHasValidation()
  {
    $this->assertTrue($this->object->hasValidation());
    $this->assertTrue($this->object->hasValidation('foo'));
    $this->assertFalse($this->object->hasValidation('zoo'));
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::invalidate
   * @covers UGComponents\IO\Response\RestTrait::isValid
   */
  public function testInvalidate()
  {
    $handler = new RestTraitStub;
    $this->assertTrue($handler->isValid());
    $handler->invalidate('foo', 'bar');
    $handler->invalidate(['foo' => 'bar']);
    $this->assertFalse($handler->isValid());
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::isError
   */
  public function testIsError()
  {
    $this->assertTrue($this->object->isError());

    $this->object->setError(false);
    $this->assertFalse($this->object->isError());

    $this->object->setError(null);
    $this->assertFalse($this->object->isError());
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::isSuccess
   */
  public function testIsSuccess()
  {
    $this->assertFalse($this->object->isSuccess());

    $this->object->setError(false);
    $this->assertTrue($this->object->isSuccess());

    $this->object->setError(null);
    $this->assertFalse($this->object->isSuccess());
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::removeResults
   */
  public function testRemoveResults()
  {
    $instance = $this->object->removeResults('foo');
    $this->assertInstanceOf('UGComponents\IO\Response\RestTraitStub', $instance);
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::removeValidation
   */
  public function testRemoveValidation()
  {
    $instance = $this->object->removeValidation('foo');
    $this->assertInstanceOf('UGComponents\IO\Response\RestTraitStub', $instance);
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::setError
   */
  public function testSetError()
  {
    $instance = $this->object->setError(false, 'something');
    $this->assertInstanceOf('UGComponents\IO\Response\RestTraitStub', $instance);
  }

  /**
   * @covers UGComponents\IO\Response\RestTrait::setResults
   */
  public function testSetResults()
  {
    $instance = $this->object->setResults('zoo', 'foo');
    $this->assertInstanceOf('UGComponents\IO\Response\RestTraitStub', $instance);

    $instance = $this->object->setResults(['zoo' => 'foo']);
    $this->assertInstanceOf('UGComponents\IO\Response\RestTraitStub', $instance);
  }
}

if(!class_exists('UGComponents\IO\Response\RestTraitStub')) {
  class RestTraitStub extends Registry
  {
    use RestTrait;
  }
}
