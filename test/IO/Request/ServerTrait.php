<?php

namespace UGComponents\IO\Request;

use PHPUnit\Framework\TestCase;
use UGComponents\Data\Registry;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-28 at 11:36:34.
 */
class IO_Request_ServerTrait_Test extends TestCase
{
  /**
   * @var ServerTrait
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new ServerTraitStub;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * covers UGComponents\IO\Request\ServerTrait::getMethod
   */
  public function testGetMethod()
  {
    $this->object->set('method', 'foobar');
    $this->assertEquals('FOOBAR', $this->object->getMethod());
  }

  /**
   * covers UGComponents\IO\Request\ServerTrait::getPath
   */
  public function testGetPath()
  {
    $this->object->setPath('/foo/bar');
    $this->assertEquals('/foo/bar', $this->object->getPath('string'));

    $this->object->setPath('/foo/bar');
    $this->assertEquals('/foo/bar', $this->object->getPath()['string']);
  }

  /**
   * covers UGComponents\IO\Request\ServerTrait::getQuery
   */
  public function testGetQuery()
  {
    $this->object->set('query', 'foobar');
    $this->assertEquals('foobar', $this->object->getQuery());
  }

  /**
   * covers UGComponents\IO\Request\ServerTrait::getServer
   */
  public function testGetServer()
  {
    $this->object->set('server', array(
      'foo' => 'bar',
      'bar' => 'foo'
    ));

    $this->assertEquals('bar', $this->object->getServer('foo'));

    $this->object->setPath('/foo/bar');
    $this->assertEquals('bar', $this->object->getServer()['foo']);
  }

  /**
   * covers UGComponents\IO\Request\ServerTrait::hasServer
   */
  public function testHasServer()
  {
    $this->object->set('server', array(
      'foo' => 'bar',
      'bar' => 'foo'
    ));

    $this->assertTrue($this->object->hasServer('foo'));
    $this->assertFalse($this->object->hasServer('zoo'));
    $this->assertTrue($this->object->hasServer());
  }

  /**
   * covers UGComponents\IO\Request\ServerTrait::isMethod
   */
  public function testIsMethod()
  {
    $this->assertFalse($this->object->isMethod('foobar'));

    $this->object->setMethod('foobar');
    $this->assertTrue($this->object->isMethod('foobar'));
  }

  /**
   * covers UGComponents\IO\Request\ServerTrait::setMethod
   */
  public function testSetMethod()
  {
    $instance = $this->object->setMethod('foobar');

    $this->assertInstanceOf('UGComponents\IO\Request\ServerTraitStub', $instance);
  }

  /**
   * covers UGComponents\IO\Request\ServerTrait::setPath
   */
  public function testSetPath()
  {
    $instance = $this->object->setPath('foobar');

    $this->assertInstanceOf('UGComponents\IO\Request\ServerTraitStub', $instance);

    $instance = $this->object->setPath(array('', 'foo', 'bar'));

    $this->assertInstanceOf('UGComponents\IO\Request\ServerTraitStub', $instance);
  }

  /**
   * covers UGComponents\IO\Request\ServerTrait::setQuery
   */
  public function testSetQuery()
  {
    $instance = $this->object->setQuery('foobar');

    $this->assertInstanceOf('UGComponents\IO\Request\ServerTraitStub', $instance);
  }

  /**
   * covers UGComponents\IO\Request\ServerTrait::setHost
   */
  public function testSetHost()
  {
    $instance = $this->object->setServer(array(
      'REQUEST_URI' => '/foo/bar?foo=bar',
      'REQUEST_METHOD' => 'GET',
      'QUERY_STRING' => 'foo=bar'
    ));

    $instance = $this->object->setHost('https');

    $this->assertInstanceOf('UGComponents\IO\Request\ServerTraitStub', $instance);
  }

  /**
   * covers UGComponents\IO\Request\ServerTrait::setServer
   */
  public function testSetServer()
  {
    $instance = $this->object->setServer(array(
      'foo' => 'bar',
      'bar' => 'foo',
      'REQUEST_URI' => '/foo/bar?foo=bar',
      'REQUEST_METHOD' => 'GET',
      'QUERY_STRING' => 'foo=bar'
    ));

    $this->assertInstanceOf('UGComponents\IO\Request\ServerTraitStub', $instance);
  }
}

if(!class_exists('UGComponents\IO\Request\ServerTraitStub')) {
  class ServerTraitStub extends Registry
  {
    use ServerTrait;
  }
}
