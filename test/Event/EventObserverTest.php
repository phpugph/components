<?php

namespace UGComponents\Event;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:00.
 */
class EventObserverTest extends TestCase
{
  /**
   * @var EventObserver
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new EventObserver(function() {});
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers UGComponents\Event\EventObserver::getCallback
   */
  public function testGetCallback()
  {
    $actual = $this->object->getCallback();
    $this->assertInstanceOf('Closure', $actual);
  }

  /**
   * @covers UGComponents\Event\EventObserver::setCallback
   */
  public function testSetCallback()
  {
    $actual = $this->object->setCallback(function() {})->getCallback();
    $this->assertInstanceOf('Closure', $actual);
  }

  /**
   * @covers UGComponents\Event\EventObserver::assertEquals
   * @covers UGComponents\Event\EventObserver::getId
   */
  public function testAssertEquals()
  {
    $callback1 = function() {};
    $callback2 = function() {};

    $stub = new EventAssertStub;

    $this->object->setCallback($callback1);
    $this->assertTrue($this->object->assertEquals($callback1));
    $this->assertFalse($this->object->assertEquals($callback2));
    $this->assertFalse($this->object->assertEquals('count'));
    $this->assertFalse($this->object->assertEquals([$stub, 'foo']));
  }
}

class EventAssertStub
{
  public function foo()
  {
  }
}
