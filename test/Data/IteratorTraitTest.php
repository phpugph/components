<?php

namespace UGComponents\Data;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:00.
 */
class IteratorTraitTest extends TestCase
{
  /**
   * @var IteratorTrait
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new IteratorTraitStub;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers UGComponents\Data\IteratorTrait::current
   */
  public function testCurrent()
  {
		$actual = $this->object->current();
  	$this->assertEquals('bar', $actual);
  }

  /**
   * @covers UGComponents\Data\IteratorTrait::key
   */
  public function testKey()
  {
    $actual = $this->object->key();
  	$this->assertEquals('foo', $actual);
  }

  /**
   * @covers UGComponents\Data\IteratorTrait::next
   */
  public function testNext()
  {
		$this->object->next();
    $actual = $this->object->current();
  	$this->assertEquals('foo', $actual);
  }

  /**
   * @covers UGComponents\Data\IteratorTrait::rewind
   */
  public function testRewind()
  {
		$this->object->rewind();
    $actual = $this->object->current();
  	$this->assertEquals('bar', $actual);
  }

  /**
   * @covers UGComponents\Data\IteratorTrait::valid
   */
  public function testValid()
  {
    $this->assertTrue($this->object->valid());
  }
}

if(!class_exists('UGComponents\Data\IteratorTraitStub')) {
	class IteratorTraitStub
	{
		use IteratorTrait;
		
		protected $data = array(
			'foo' => 'bar',
			'bar' => 'foo'
		);
	}
}
