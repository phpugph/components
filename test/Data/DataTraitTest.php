<?php

namespace UGComponents\Data;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:10:59.
 */
class DataTraitTest extends TestCase
{
  /**
   * @var DataTrait
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new DataTraitStub;

    $this->object->setDot('foo', 'bar');
    $this->object->setDot('bar', 'foo');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers UGComponents\Data\DataTrait::copy
   */
  public function testOffsetCopy()
  {
    $this->object->copy('foo', 'zoo');
    $actual = $this->object->get('zoo');
    $this->assertEquals('bar', $actual);

    $this->object->copy('foobar', 'zoo');
    $actual = $this->object->get('zoo');
    $this->assertNull($actual);
  }

  /**
   * @covers UGComponents\Data\DataTrait::purge
   */
  public function testOffsetPurge()
  {
    $this->object->purge();
    $this->assertEmpty($this->object->get());
  }

  /**
   * @covers UGComponents\Data\DataTrait::offsetExists
   */
  public function testOffsetExists()
  {
    $this->assertTrue($this->object->offsetExists('foo'));
    $this->assertFalse($this->object->offsetExists(3));
  }

  /**
   * @covers UGComponents\Data\DataTrait::offsetGet
   */
  public function testOffsetGet()
  {
    $actual = $this->object->offsetGet('foo');
    $this->assertEquals('bar', $actual);
  }

  /**
   * @covers UGComponents\Data\DataTrait::offsetSet
   */
  public function testOffsetSet()
  {
    $this->object->offsetSet('zoo', 2);

    $this->assertEquals(2, $this->object->offsetGet('zoo'));
  }

  /**
   * @covers UGComponents\Data\DataTrait::offsetUnset
   */
  public function testOffsetUnset()
  {
    $this->object->offsetUnset('foo');
    $this->assertNull($this->object->offsetGet('foo'));
  }

  /**
   * @covers UGComponents\Data\DataTrait::current
   */
  public function testCurrent()
  {
    $actual = $this->object->current();
    $this->assertEquals('bar', $actual);
  }

  /**
   * @covers UGComponents\Data\DataTrait::key
   */
  public function testKey()
  {
    $actual = $this->object->key();
    $this->assertEquals('foo', $actual);
  }

  /**
   * @covers UGComponents\Data\DataTrait::next
   */
  public function testNext()
  {
    $this->object->next();
    $actual = $this->object->current();
    $this->assertEquals('foo', $actual);
  }

  /**
   * @covers UGComponents\Data\DataTrait::rewind
   */
  public function testRewind()
  {
    $this->object->rewind();
    $actual = $this->object->current();
    $this->assertEquals('bar', $actual);
  }

  /**
   * @covers UGComponents\Data\DataTrait::valid
   */
  public function testValid()
  {
    $this->assertTrue($this->object->valid());
  }

  /**
   * @covers UGComponents\Data\DataTrait::count
   */
  public function testCount()
  {
    $this->assertEquals(2, $this->object->count());
  }

  /**
   * @covers UGComponents\Data\DataTrait::getDot
   */
  public function testGetDot()
  {
    $this->assertEquals('bar', $this->object->getDot('foo'));
  }

  /**
   * @covers UGComponents\Data\DataTrait::isDot
   */
  public function testIsDot()
  {
    $this->assertTrue($this->object->isDot('bar'));
  }

  /**
   * @covers UGComponents\Data\DataTrait::removeDot
   */
  public function testRemoveDot()
  {
    $this->object->removeDot('foo');
    $this->assertFalse($this->object->isDot('foo'));
  }

  /**
   * @covers UGComponents\Data\DataTrait::setDot
   */
  public function testSetDot()
  {
    $this->object->setDot('zoo', 2);
    $this->assertEquals(2, $this->object->getDot('zoo'));
  }

  /**
   * @covers UGComponents\Data\DataTrait::__callData
   */
  public function test__callData()
  {
    $instance = $this->object->__callData('setZoo', array(2));
    $this->assertInstanceOf('UGComponents\Data\DataTraitStub', $instance);

    $actual = $this->object->__callData('getZoo', array());

    $this->assertEquals(2, $actual);
  }

  /**
   * @covers UGComponents\Data\DataTrait::__getData
   */
  public function test__getData()
  {
    $actual = $this->object->__getData('foo');
    $this->assertEquals('bar', $actual);
  }

  /**
   * @covers UGComponents\Data\DataTrait::__setData
   */
  public function test__setData()
  {
    $this->object->__setData('zoo', 2);
    $actual = $this->object->__getData('zoo');

    $this->assertEquals(2, $actual);
  }

  /**
   * @covers UGComponents\Data\DataTrait::__toStringData
   */
  public function test__toStringData()
  {
    $this->assertEquals(json_encode([
      'foo' => 'bar',
      'bar' => 'foo'
    ], JSON_PRETTY_PRINT), $this->object->__toStringData());
  }

  /**
   * @covers UGComponents\Data\DataTrait::generator
   */
  public function testGenerator()
  {
    foreach($this->object->generator() as $i => $value);

    $this->assertEquals('bar', $i);
  }
}

if(!class_exists('UGComponents\Data\DataTraitStub')) {
  class DataTraitStub
  {
    use DataTrait, DotTrait;
    public function get(...$args)
    {
      if (count($args) === 0) {
        return $this->data;
      }

      $separator = '--'. md5(uniqid()) . '--';
      return $this->getDot(implode($separator, $args), $separator);
    }
  }
}
