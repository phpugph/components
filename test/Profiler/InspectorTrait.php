<?php

namespace UGComponents\Profiler;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:02.
 */
class Profiler_InspectorTrait_Test extends TestCase
{
  /**
   * @var InspectorTrait
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new InspectorTraitStub;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers UGComponents\Profiler\InspectorTrait::getInspectorHandler
   */
  public function testGetInspectorHandler()
  {
    $instance = $this->object->getInspectorHandler();
    $this->assertInstanceOf('UGComponents\Profiler\InspectorInterface', $instance);
  }

  /**
   * @covers UGComponents\Profiler\InspectorTrait::inspect
   */
  public function testInspect()
  {
    ob_start();
    $this->object->inspect('foobar');
    $contents = ob_get_contents();
    ob_end_clean();

    $this->assertEquals(
      '<pre>INSPECTING Variable:</pre><pre>foobar</pre>',
      $contents
    );

    ob_start();
    $this->object->inspect('x');
    $contents = ob_get_contents();
    ob_end_clean();

    $this->assertEquals(
      '<pre>INSPECTING UGComponents\Profiler\InspectorTraitStub->x:</pre><pre>4</pre>',
      $contents
    );

    ob_start();
    $this->object->inspect();
    $contents = ob_get_contents();
    ob_end_clean();

    $this->assertStringContainsString(
      '<pre>INSPECTING UGComponents\Profiler\InspectorTraitStub:',
      $contents
    );

    ob_start();
    $this->object->inspect(true)->getX();
    $contents = ob_get_contents();
    ob_end_clean();

    $this->assertEquals(
      '<pre>INSPECTING UGComponents\Profiler\InspectorTraitStub->:</pre><pre>4</pre>',
      $contents
    );

    ob_start();
    $this->object->inspect([1, 2, 3]);
    $contents = ob_get_contents();
    ob_end_clean();

    $this->assertStringContainsString('[0] => 1', $contents);
    $this->assertStringContainsString('[1] => 2', $contents);
    $this->assertStringContainsString('[2] => 3', $contents);
  }

  /**
   * @covers UGComponents\Profiler\InspectorTrait::setInspectorHandler
   */
  public function testSetInspectorHandler()
  {
    $instance = $this->object->setInspectorHandler(new InspectorHandlerStub);
    $this->assertInstanceOf('UGComponents\Profiler\InspectorTraitStub', $instance);
  }
}

if(!class_exists('UGComponents\Profiler\InspectorTraitStub')) {
  class InspectorTraitStub
  {
    use InspectorTrait;

    public $x = 4;

    public function getX()
    {
      return $this->x;
    }
  }
}

if(!class_exists('UGComponents\Profiler\InspectorHandlerStub')) {
  class InspectorHandlerStub extends InspectorHandler
  {
  }
}
