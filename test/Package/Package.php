<?php

namespace UGComponents\Package;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 13:49:45.
 */
class Package_Package_Test extends TestCase
{
  /**
   * @var Package
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new Package(new PackageHandler, 'foo/bar');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers UGComponents\Package\Package::__call
   */
  public function test__call()
  {
    $this->object->addPackageMethod('foo', function() {
      return 'bar';
    });

    $actual = $this->object->__call('foo', array());
    $this->assertEquals('bar', $actual);

    $this->object->addPackageMethod('zoo', function() {
      return $this;
    });

    $actual = $this->object->__call('zoo', array());
    $this->assertEquals($this->object, $actual);

    $trigger = false;
    try {
      $actual = $this->object->__call('bar', array());
    } catch(PackageException $e) {
      $trigger = true;
    }

    $this->assertTrue($trigger);
  }

  /**
   * @covers UGComponents\Package\Package::addPackageMethod
   */
  public function testaddPackageMethod()
  {
    $this->object->addPackageMethod('foo', function() {
      return 'bar';
    });

    $actual = $this->object->__call('foo', array());
    $this->assertEquals('bar', $actual);
  }

  /**
   * @covers UGComponents\Package\Package::__construct
   * @covers UGComponents\Package\Package::getPackagePath
   */
  public function testGetPackagePath()
  {
    //foo/bar
    $actual = $this->object->getPackagePath();
    $this->assertStringContainsString('/foo/bar', $actual);

    $this->object->__construct(new PackageHandler, '/foo/bar');
    $actual = $this->object->getPackagePath();
    $this->assertStringContainsString('/foo/bar', $actual);
    $this->assertFalse(strpos($actual, '/vendor/foo/bar'));

    $this->object->__construct(new PackageHandler, 'foo');
    $actual = $this->object->getPackagePath();
    $this->assertFalse($actual);
    $actual = $this->object->getPackagePath();
    $this->assertFalse($actual);
  }

  /**
   * @covers UGComponents\Package\Package::getPackageType
   */
  public function testGetPackageType()
  {
    //foo/bar
    $actual = $this->object->getPackageType();
    $this->assertEquals('vendor', $actual);

    $this->object->__construct(new PackageHandler, '/foo/bar');
    $actual = $this->object->getPackageType();
    $this->assertEquals('root', $actual);

    $this->object->__construct(new PackageHandler, 'foo');
    $actual = $this->object->getPackageType();
    $this->assertEquals('pseudo', $actual);
  }

  /**
   * @covers UGComponents\Package\Package::mapPackageMethods
   * @covers UGComponents\Package\Package::__call
   */
  public function testMapPackageMethods()
  {
    $map = new MapStub('test');
    //foo/bar
    $this->object->mapPackageMethods($map);
    $actual = $this->object->getMessage();
    $this->assertEquals('test', $actual);

    $this->object->addPackageMethod('getMessage', function() {
      return 'override';
    });

    $this->object->addPackageMethod('getThis', function() {
      return $this;
    });

    $actual = $this->object->getMap()->getThis()->getMessage();
    $this->assertEquals('override', $actual);
  }

  /**
   * @covers UGComponents\Package\Package::getPackageHandler
   */
  public function testGetPackageHandler()
  {
    $handler = new PackageHandler;
    $package = new Package($handler, 'foo/bar');
    $actual = $this->object->getPackageHandler();
    $this->assertEquals($handler, $actual);
  }

  /**
   * @covers UGComponents\Package\Package::getPackageMethods
   */
  public function testGetPackageMethods()
  {
    $actual = $this->object->getPackageMethods();
    $this->assertEmpty($actual);
  }
}

class MapStub
{
  public $message = null;
  public function __construct($message) {
    $this->message = $message;
  }
  public function getMap() {
    return $this;
  }

  public function getMessage() {
    return $this->message;
  }
}
