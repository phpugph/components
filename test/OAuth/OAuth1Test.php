<?php //-->

namespace UGComponents\OAuth;

use SimpleXMLElement;
use DOMDocument;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-28 at 11:36:33.
 */
class OAuth1Test extends TestCase
{
  /**
   * @var OAuth1
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new OAuth1(
      '1234567890',
      '4567890123',
      '/foo/redirect',
      '/foo/request',
      '/foo/authorize',
      '/foo/access',
      function($options) {
        $options['response'] = 'foo=bar';
        return $options;
      }
    );
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers UGComponents\OAuth\OAuth1::__construct
   */
  public function test__construct()
  {
    $this->object = new OAuth1(
      '1234567890',
      '4567890123',
      '/foo/redirect',
      '/foo/request',
      '/foo/authorize',
      '/foo/access'
    );

    $this->assertInstanceOf(OAuth1::class, $this->object);
  }

  /**
   * @covers UGComponents\OAuth\OAuth1::getAccessTokens
   * @covers UGComponents\OAuth\AbstractOAuth1::setUrl
   * @covers UGComponents\OAuth\AbstractOAuth1::useAuthorization
   * @covers UGComponents\OAuth\AbstractOAuth1::setMethodToPost
   * @covers UGComponents\OAuth\AbstractOAuth1::setToken
   * @covers UGComponents\OAuth\AbstractOAuth1::setVerifier
   * @covers UGComponents\OAuth\AbstractOAuth1::setSignatureToHmacSha1
   * @covers UGComponents\OAuth\AbstractOAuth1::getQueryResponse
   * @covers UGComponents\OAuth\AbstractOAuth1::getResponse
   * @covers UGComponents\OAuth\AbstractOAuth1::getSignature
   * @covers UGComponents\OAuth\AbstractOAuth1::getAuthorization
   * @covers UGComponents\OAuth\AbstractOAuth1::buildQuery
   * @covers UGComponents\OAuth\AbstractOAuth1::encode
   */
  public function testGetAccessTokens()
  {
    $actual = $this->object->getAccessTokens('1234567890', '4567890123', '7890123456');
    $this->assertEquals('bar', $actual['foo']);
  }

  /**
   * @covers UGComponents\OAuth\OAuth1::getLoginUrl
   */
  public function testGetLoginUrl()
  {
    $actual = $this->object->getLoginUrl('1234567890', true);
    $this->assertEquals('/foo/authorize?oauth_token=1234567890&oauth_callback=%2Ffoo%2Fredirect&force_login=1', $actual);
  }

  /**
   * @covers UGComponents\OAuth\OAuth1::getRequestTokens
   * @covers UGComponents\OAuth\AbstractOAuth1::setUrl
   * @covers UGComponents\OAuth\AbstractOAuth1::useAuthorization
   * @covers UGComponents\OAuth\AbstractOAuth1::setMethodToPost
   * @covers UGComponents\OAuth\AbstractOAuth1::setSignatureToHmacSha1
   * @covers UGComponents\OAuth\AbstractOAuth1::getQueryResponse
   * @covers UGComponents\OAuth\AbstractOAuth1::getResponse
   * @covers UGComponents\OAuth\AbstractOAuth1::getSignature
   * @covers UGComponents\OAuth\AbstractOAuth1::getHmacSha1Signature
   * @covers UGComponents\OAuth\AbstractOAuth1::getAuthorization
   * @covers UGComponents\OAuth\AbstractOAuth1::buildQuery
   * @covers UGComponents\OAuth\AbstractOAuth1::encode
   */
  public function testGetRequestTokens()
  {
    $actual = $this->object->getRequestTokens();
    $this->assertEquals('bar', $actual['foo']);
  }

  /**
   * @covers UGComponents\OAuth\OAuth1::get
   * @covers UGComponents\OAuth\AbstractOAuth1::setUrl
   * @covers UGComponents\OAuth\AbstractOAuth1::useAuthorization
   * @covers UGComponents\OAuth\AbstractOAuth1::setMethodToGet
   * @covers UGComponents\OAuth\AbstractOAuth1::setToken
   * @covers UGComponents\OAuth\AbstractOAuth1::setSignatureToHmacSha1
   * @covers UGComponents\OAuth\AbstractOAuth1::getJsonResponse
   * @covers UGComponents\OAuth\AbstractOAuth1::getResponse
   * @covers UGComponents\OAuth\AbstractOAuth1::getSignature
   * @covers UGComponents\OAuth\AbstractOAuth1::getAuthorization
   * @covers UGComponents\OAuth\AbstractOAuth1::buildQuery
   * @covers UGComponents\OAuth\AbstractOAuth1::encode
   */
  public function testGet()
  {
    $this->object = new OAuth1(
      '1234567890',
      '4567890123',
      '/foo/redirect',
      '/foo/request',
      '/foo/authorize',
      '/foo/access',
      function($options) {
        $options['response'] = '{"foo": "bar"}';
        return $options;
      }
    );

    $actual = $this->object->get('/rest', [
      'oauth_token' => '7890123456',
      'oauth_token_secret' => '1234567890'
    ]);
    $this->assertEquals('bar', $actual['foo']);
  }

  /**
   * @covers UGComponents\OAuth\OAuth1::get
   * @covers UGComponents\OAuth\AbstractOAuth1::setUrl
   * @covers UGComponents\OAuth\AbstractOAuth1::addHeader
   * @covers UGComponents\OAuth\AbstractOAuth1::setHeaders
   * @covers UGComponents\OAuth\AbstractOAuth1::jsonEncodeQuery
   * @covers UGComponents\OAuth\AbstractOAuth1::setMethodToGet
   * @covers UGComponents\OAuth\AbstractOAuth1::setSignatureToRsaSha1
   * @covers UGComponents\OAuth\AbstractOAuth1::setSignatureToPlainText
   * @covers UGComponents\OAuth\AbstractOAuth1::setRealm
   * @covers UGComponents\OAuth\AbstractOAuth1::setCallback
   * @covers UGComponents\OAuth\AbstractOAuth1::getQueryResponse
   * @covers UGComponents\OAuth\AbstractOAuth1::getSimpleXmlResponse
   * @covers UGComponents\OAuth\AbstractOAuth1::getDomDocumentResponse
   * @covers UGComponents\OAuth\AbstractOAuth1::getResponse
   * @covers UGComponents\OAuth\AbstractOAuth1::getSignature
   * @covers UGComponents\OAuth\AbstractOAuth1::getHmacPlainTextSignature
   * @covers UGComponents\OAuth\AbstractOAuth1::getHmacSha1Signature
   * @covers UGComponents\OAuth\AbstractOAuth1::getAuthorization
   * @covers UGComponents\OAuth\AbstractOAuth1::buildQuery
   * @covers UGComponents\OAuth\AbstractOAuth1::encode
   * @covers UGComponents\OAuth\AbstractOAuth1::getMeta
   * @covers UGComponents\OAuth\AbstractOAuth1::parseString
   */
  public function testStubs()
  {
    $this->object = new OAuthStub(
      '1234567890',
      '4567890123',
      '/foo/redirect',
      '/foo/request',
      '/foo/authorize',
      '/foo/access',
      function($options) {
        $options['response'] = 'foo=bar';
        return $options;
      }
    );

    $actual = $this->object->getResponse1();
    $this->assertEquals('bar', $actual['foo']);

    $this->object = new OAuthStub(
      '1234567890',
      '4567890123',
      '/foo/redirect',
      '/foo/request',
      '/foo/authorize',
      '/foo/access',
      function($options) {
        $options['response'] = '<foo><bar>zoo</bar></foo>';
        return $options;
      }
    );

    $actual = $this->object->getXmlResponse2();
    $this->assertInstanceOf(SimpleXMLElement::class, $actual);

    $actual = $this->object->getDomResponse3();
    $this->assertInstanceOf(DOMDocument::class, $actual);

    $actual = $this->object->parseString1();
    $this->assertEquals('baz', $actual['foo'][1]);

    $actual = $this->object->parseString2();
    $this->assertEmpty($actual);

    $actual = $this->object->getMeta1();
    $this->assertTrue(is_array($actual));

    $actual = $this->object->getMeta2();
    $this->assertEquals('<foo><bar>zoo</bar></foo>', $actual);
  }
}

class OAuthStub extends OAuth1
{
  public function getResponse1()
  {
    return $this
      ->setUrl($this->urlAccess)
      ->setToken('1234', '5678')
      ->addHeader('foo', 'bar')
      ->jsonEncodeQuery()
      ->setMethodToGet()
      ->setSignatureToPlainText()
      ->setRealm('west')
      ->setCallback('/foo/callback')
      ->getQueryResponse();
  }

  public function getXmlResponse2()
  {
    return $this
      ->setUrl($this->urlAccess)
      ->setToken('1234', '5678')
      ->setHeaders(['foo' => 'bar'])
      ->setMethodToGet()
      ->setSignatureToRsaSha1()
      ->getSimpleXmlResponse();
  }

  public function getDomResponse3()
  {
    return $this
      ->setUrl($this->urlAccess)
      ->getDomDocumentResponse();
  }

  public function parseString1()
  {
    return $this->parseString('foo=bar&foo=baz&bar[]=foo');
  }

  public function parseString2()
  {
    return $this->parseString('');
  }

  public function getMeta1()
  {
    return $this->getMeta('foo');
  }

  public function getMeta2()
  {
    return $this->getMeta('response');
  }
}
