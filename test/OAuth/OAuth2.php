<?php //-->

namespace UGComponents\OAuth;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-28 at 11:36:33.
 */
class OAuth_OAuth2_Test extends TestCase
{
  /**
   * @var OAuth2
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->object = new OAuth2(
      '1234567890',
      '4567890123',
      '/foo/redirect',
      '/foo/request',
      '/foo/access',
      '/foo/resource',
      function($options) {
        $options['response'] = 'foo=bar';
        return $options;
      }
    );
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers UGComponents\OAuth\OAuth2::__construct
   */
  public function test__construct()
  {
    $this->object = new OAuth2(
      '1234567890',
      '4567890123',
      '/foo/redirect',
      '/foo/request',
      '/foo/access',
      '/foo/resource'
    );

    $this->assertInstanceOf(OAuth2::class, $this->object);
  }

  /**
   * @covers UGComponents\OAuth\OAuth2::getAccessTokens
   * @covers UGComponents\OAuth\OAuth2::isJson
   */
  public function testGetAccessTokens()
  {
    $actual = $this->object->getAccessTokens('1234567890');
    $this->assertEquals('bar', $actual['foo']);

    $this->object = new OAuth2(
      '1234567890',
      '4567890123',
      '/foo/redirect',
      '/foo/request',
      '/foo/access',
      '/foo/resource',
      function($options) {
        $options['response'] = '{"foo": "bar"}';
        return $options;
      }
    );

    $actual = $this->object->getAccessTokens('1234567890');
    $this->assertEquals('bar', $actual['foo']);
  }

  /**
   * @covers UGComponents\OAuth\OAuth2::getLoginUrl
   * @covers UGComponents\OAuth\AbstractOAuth2::setState
   * @covers UGComponents\OAuth\AbstractOAuth2::setDisplay
   * @covers UGComponents\OAuth\AbstractOAuth2::setScope
   * @covers UGComponents\OAuth\AbstractOAuth2::autoApprove
   * @covers UGComponents\OAuth\AbstractOAuth2::forceApprove
   * @covers UGComponents\OAuth\AbstractOAuth2::forOnline
   * @covers UGComponents\OAuth\AbstractOAuth2::forOffline
   */
  public function testGetLoginUrl()
  {
    $expected = '/foo/request?response_type=code&client_id=1234567890'
                .'&redirect_uri=%2Ffoo%2Fredirect&access_type=online'
                .'&approval_prompt=auto';

    $actual = $this->object->getLoginUrl();
    $this->assertEquals($expected, $actual);

    $expected = '/foo/request?response_type=code&client_id=1234567890'
                .'&redirect_uri=%2Ffoo%2Fredirect&access_type=online'
                .'&approval_prompt=auto&scope=foo%2Cbar&state=foo'
                .'&display=online';

    $actual = $this->object
      ->setState('foo')
      ->autoApprove()
      ->forOnline()
      ->setDisplay('online')
      ->setScope('foo', 'bar')
      ->getLoginUrl();

    $this->assertEquals($expected, $actual);

    $this->object = new OAuth2(
      '1234567890',
      '4567890123',
      '/foo/redirect',
      '/foo/request',
      '/foo/access',
      '/foo/resource',
      function($options) {
        $options['response'] = 'foo=bar';
        return $options;
      }
    );

    $expected = '/foo/request?response_type=code&client_id=1234567890'
                .'&redirect_uri=%2Ffoo%2Fredirect&access_type=offline'
                .'&approval_prompt=force&scope=foo%2Cbar&state=foo'
                .'&display=online';

    $actual = $this->object
      ->setState('foo')
      ->forceApprove()
      ->forOffline()
      ->setDisplay('online')
      ->setScope('foo', 'bar')
      ->getLoginUrl();

    $this->assertEquals($expected, $actual);
  }

  /**
   * @covers UGComponents\OAuth\OAuth2::get
   */
  public function testGet()
  {
    $this->object = new OAuth2(
      '1234567890',
      '4567890123',
      '/foo/redirect',
      '/foo/request',
      '/foo/access',
      '/foo/resource',
      function($options) {
        $options['response'] = '{"foo": "bar"}';
        return $options;
      }
    );

    $actual = $this->object->get(['foo' => 'bar']);
    $this->assertEquals('bar', $actual['foo']);
  }
}
